package tn.spring.pispring.ServiceIMP;

import com.fasterxml.jackson.databind.ObjectMapper;
import tn.spring.pispring.Entities.User;
import tn.spring.pispring.Entities.Vulnerability;
import tn.spring.pispring.Entities.VulnerabilityResponse;
import tn.spring.pispring.Interfaces.VulnerabilityInterface;
import tn.spring.pispring.repo.VulnerabilityRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class VulnerabilityService implements VulnerabilityInterface {
    @Autowired
    VulnerabilityRepository vulnerabilityRepository;
    @Override
    public Vulnerability addVulnerability(Vulnerability vulnerability) {
        return vulnerabilityRepository.save(vulnerability);
    }

    @Override
    public Vulnerability UpdateVulnerability(Long id, Vulnerability updatedVulnerability) {
        Optional<Vulnerability> optionalVulnerability = vulnerabilityRepository.findById(id);

        if (optionalVulnerability.isPresent()) {
            Vulnerability existingVulnerability = optionalVulnerability.get();
            existingVulnerability.setDescription(updatedVulnerability.getDescription());
         //   existingVulnerability.setDate(updatedVulnerability.getDate());
            existingVulnerability.setDegre(updatedVulnerability.getDegre());
            return vulnerabilityRepository.save(existingVulnerability);
        } else {
            return null;
        }
    }


    @Override
    public void deleteVulnerability(long id) {
        vulnerabilityRepository.deleteById(id);

    }

    @Override
    public List<Vulnerability> findAllVulnerabilities() {
        return vulnerabilityRepository.findAll();
    }

    @Override
    public Vulnerability findVulnerabilityById(long id) {
        return vulnerabilityRepository.findById(id).get();
    }
    private List<Vulnerability> parseVulnerabilities(String vulnerabilitiesJson) {
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            VulnerabilityResponse response = objectMapper.readValue(vulnerabilitiesJson, VulnerabilityResponse.class);
            return response.getVulnerabilities();
        } catch (IOException e) {
            e.printStackTrace();
            return new ArrayList<>();
        }
}}
